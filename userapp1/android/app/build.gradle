// android/app/build.gradle

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// Pull in the React Native CLIâ€“generated native_modules
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)

// Load CodePush gradle config
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

// Vector icons
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

// === React / Hermes config ===
project.ext.react = [
    enableHermes: true  // Enable Hermes for JS engine
]

// Fetch the flag into a convenient local var
def hermesEnabled = project.ext.react.enableHermes.toBoolean()

// === Android build settings ===
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion   rootProject.ext.buildToolsVersion

    namespace "com.userapp1"

    defaultConfig {
        applicationId   "com.userapp1"
        minSdkVersion   rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode     206
        versionName     "2.0.6"

        manifestPlaceholders = [
            CodePushDeploymentKey: "1b231e43-2817-11f0-ba9f-1a459c0f37ba"
        ]
    }

    signingConfigs {
        debug {
            storeFile     file('debug.keystore')
            storePassword 'android'
            keyAlias      'androiddebugkey'
            keyPassword   'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile   file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias      MYAPP_UPLOAD_KEY_ALIAS
                keyPassword    MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += ["-Xskip-metadata-version-check"]
    }
    lintOptions {
        disable 'MissingPermission'
    }

    ndkVersion   rootProject.ext.ndkVersion
}

// === Dependencies ===
dependencies {
    // React Native core
    implementation("com.facebook.react:react-android")

    // Mapbox native module
    implementation project(":@rnmapbox_maps")

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:33.1.2")
    implementation 'com.google.firebase:firebase-analytics:21.5.1'
    implementation 'com.google.firebase:firebase-crashlytics:18.6.1'
    implementation 'com.google.firebase:firebase-auth:20.3.0'
    implementation 'com.google.firebase:firebase-messaging:20.3.0'

    // CodePush
    implementation project(":react-native-code-push")

    // JS engine: Hermes or JSC
    if (hermesEnabled) {
        implementation("com.facebook.react:hermes-android")
    } else {
        def jscFlavor = 'org.webkit:android-jsc:+'
        implementation jscFlavor
    }
}

// Exclude conflicting safety-net module
configurations.all {
    exclude group: 'com.google.android.gms', module: 'play-services-safetynet'
}

// Ensure vector icons font copy runs before lint
tasks.whenTaskAdded { task ->
    if (task.name in ['generateDebugLintReportModel', 'lintAnalyzeDebug']) {
        task.dependsOn('copyReactNativeVectorIconFonts')
    }
}
