import { IBaseResponse, IGeocodingResult, ILanguage, IPlacesAutoCompleteResult, IReverseGeocodingResult, IVersion } from "./types";
type PlacesOption = {
    "X-Request-Id"?: string;
    "X-Correlation-Id"?: string;
    language?: ILanguage;
    location?: {
        latitude: string | number;
        longitude: string | number;
    };
    radius?: number;
    strictbounds?: boolean;
};
type GeocodingOption = {
    "X-Request-Id"?: string;
    "X-Correlation-Id"?: string;
    language?: ILanguage;
    bounding?: {
        x: {
            latitude: string | number;
            longitude: string | number;
        };
        y: {
            latitude: string | number;
            longitude: string | number;
        };
    };
};
type ReverseGeocodingOption = {
    "X-Request-Id"?: string;
    "X-Correlation-Id"?: string;
};
/**
 * Represents a client for interacting with a Places API.
 * Provides methods for autocomplete and geocoding functionality.
 */
export declare class Places {
    /**
     * API key for authentication with the Places service.
     * @private
     */
    private apiKey;
    /**
     * The API version to use. Defaults to 'v1'.
     * @private
     */
    private version;
    /**
     * The Axios instance used for making HTTP requests.
     * @private
     */
    private httpClient;
    /**
     * Creates a new Places client.
     * @param apiKey - Your API key for the Places service.
     * @param version - (Optional) The API version to use. Defaults to 'v1'.
     * @throws {Error} If the API key is missing or invalid.
     */
    constructor(apiKey: string, version?: IVersion);
    /**
     * Initializes the Places client by setting up the Axios instance and environment variables.
     * @private
     */
    private init;
    /**
     * Performs autocomplete based on the provided input and options.
     * @param input - The user's search input.
     * @param options - (Optional) Additional options to customize the request.
     * @returns A Promise that resolves to the autocomplete results.
     */
    autocomplete(input: string, options?: PlacesOption): Promise<IBaseResponse<IPlacesAutoCompleteResult>>;
    /**
     * Performs geocode based on the provided address and options.
     * @param address - The address to geocode.
     * @param options - (Optional) Additional options to customize the request.
     * @returns A Promise that resolves to the geocoding results.
     */
    geocode(address: string, options?: GeocodingOption): Promise<IBaseResponse<IGeocodingResult>>;
    /**
     * Performs reverse geocode to get address details from latitude and longitude coordinates.
     *
     * @param lat - The latitude coordinate.
     * @param lng - The longitude coordinate.
     * @param options - (Optional) Additional options to customize the request:
     *   - X-Correlation-Id: (Optional) A correlation ID for tracking the request.
     *   - X-Request-Id: (Optional) A unique request ID.
     * @returns A Promise that resolves to the reverse geocoding results.
     * @throws {Error} If an error occurs during the request.
     */
    reverse_geocode(lat: string | number, lng: string | number, options?: ReverseGeocodingOption): Promise<IBaseResponse<IReverseGeocodingResult>>;
}
export {};
