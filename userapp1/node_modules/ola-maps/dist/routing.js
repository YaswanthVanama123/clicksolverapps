"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Routing = void 0;
var const_1 = require("./const");
var http_client_1 = require("./utilities/http-client");
/**
 * Client for interacting with the OLA Maps Routing API.
 *
 * This class provides methods for calculating directions between locations,
 * handling authentication, and managing API requests.
 */
var Routing = /** @class */ (function () {
    /**
     * Creates a new Places client.
     * @param apiKey - Your API key for the Places service.
     * @param version - (Optional) The API version to use. Defaults to 'v1'.
     * @throws {Error} If the API key is missing or invalid.
     */
    function Routing(apiKey, version) {
        if (version === void 0) { version = "v1"; }
        /**
         * API key for authentication with the Places service.
         * @private
         */
        this.apiKey = "";
        /**
         * The API version to use. Defaults to 'v1'.
         * @private
         */
        this.version = "v1";
        /**
         * The Axios instance used for making HTTP requests.
         * @private
         */
        this.httpClient = {};
        if (!apiKey || apiKey.trim() === "") {
            throw new Error("API Key is required. Check documentation - https://maps.olakrutrim.com/docs/auth");
        }
        this.apiKey = apiKey;
        this.version = version;
        this.init();
    }
    /**
     * Initializes the Places client by setting up the Axios instance and environment variables.
     * @private
     */
    Routing.prototype.init = function () {
        var env = const_1.ENV[this.version];
        process.env.API_VERSION = this.version;
        for (var variable in env) {
            if (env[variable]) {
                process.env[variable] = env[variable];
            }
        }
        this.httpClient = (0, http_client_1.httpClientInit)(this.apiKey);
    };
    /**
     * Calculates directions between an origin and destination, with optional parameters.
     *
     * @async
     * @param {Coordinates} origin - An object with `lat` (latitude) and `lng` (longitude) properties representing the starting point.
     * @param {Coordinates} destination - An object with `lat` and `lng` properties representing the ending point.
     * @param {DirectionOptions} [options] - Optional parameters for customizing the direction request.
     * @returns {Promise<IBaseResponse<IDirectionResult>>} A Promise that resolves to a standardized API response containing the direction results.
     * @throws {Error} If an error occurs during the API request, the Promise will be rejected with the error.
     */
    Routing.prototype.direction = function (origin, destination, options) {
        return __awaiter(this, void 0, void 0, function () {
            var path, data, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        path = "".concat(process.env.directionPath, "?origin=").concat(origin.lat, ",").concat(origin.lng, "&destination=").concat(destination.lat, ",").concat(destination.lng, "&");
                        if (options) {
                            if (options["X-Correlation-Id"]) {
                                path += "X-Correlation-Id=".concat(options["X-Correlation-Id"], "&");
                            }
                            if (options["X-Request-Id"]) {
                                path += "X-Request-Id=".concat(options["X-Request-Id"], "&");
                            }
                            if (options.language) {
                                path += "language=".concat(options.language, "&");
                            }
                            if (typeof options.alternatives === "boolean") {
                                path += "alternatives=".concat(options.alternatives, "&");
                            }
                            if (typeof options.traffic_metadata === "boolean") {
                                path += "traffic_metadata=".concat(options.traffic_metadata, "&");
                            }
                            if (typeof options.steps === "boolean") {
                                path += "steps=".concat(options.steps, "&");
                            }
                            if (typeof options.overview === "boolean" || typeof options.overview === "string") {
                                path += "overview=".concat(options.overview, "&s");
                            }
                            if (options.waypoints) {
                                path += "waypoints=".concat(options.waypoints.map(function (points) { return points.join(","); }).join("|"), "&");
                            }
                        }
                        if (path.endsWith("&") || path.endsWith("?")) {
                            path = path.slice(0, -1);
                        }
                        return [4 /*yield*/, this.httpClient.post(path, "")];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, Promise.resolve(data)];
                    case 2:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Routing;
}());
exports.Routing = Routing;
