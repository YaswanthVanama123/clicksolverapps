import { IBaseResponse, IDirectionResult, ILanguage, IVersion } from "./types";
type Coordinates = {
    lat: string | number;
    lng: string | number;
};
type DirectionOptions = {
    "X-Request-Id"?: string;
    "X-Correlation-Id"?: string;
    waypoints?: Array<[string | number, string | number]>;
    alternatives?: boolean;
    steps?: boolean;
    overview?: "full" | "simplied" | false;
    language?: ILanguage;
    traffic_metadata?: boolean;
};
/**
 * Client for interacting with the OLA Maps Routing API.
 *
 * This class provides methods for calculating directions between locations,
 * handling authentication, and managing API requests.
 */
export declare class Routing {
    /**
     * API key for authentication with the Places service.
     * @private
     */
    private apiKey;
    /**
     * The API version to use. Defaults to 'v1'.
     * @private
     */
    private version;
    /**
     * The Axios instance used for making HTTP requests.
     * @private
     */
    private httpClient;
    /**
     * Creates a new Places client.
     * @param apiKey - Your API key for the Places service.
     * @param version - (Optional) The API version to use. Defaults to 'v1'.
     * @throws {Error} If the API key is missing or invalid.
     */
    constructor(apiKey: string, version?: IVersion);
    /**
     * Initializes the Places client by setting up the Axios instance and environment variables.
     * @private
     */
    private init;
    /**
     * Calculates directions between an origin and destination, with optional parameters.
     *
     * @async
     * @param {Coordinates} origin - An object with `lat` (latitude) and `lng` (longitude) properties representing the starting point.
     * @param {Coordinates} destination - An object with `lat` and `lng` properties representing the ending point.
     * @param {DirectionOptions} [options] - Optional parameters for customizing the direction request.
     * @returns {Promise<IBaseResponse<IDirectionResult>>} A Promise that resolves to a standardized API response containing the direction results.
     * @throws {Error} If an error occurs during the API request, the Promise will be rejected with the error.
     */
    direction(origin: Coordinates, destination: Coordinates, options?: DirectionOptions): Promise<IBaseResponse<IDirectionResult>>;
}
export {};
